from typing import Any

_logger: Any

class UserError(Exception):
    def __init__(self, message) -> None: ...
    @property
    def name(self): ...

class RedirectWarning(Exception):
    def __init__(self, message, action, button_text, additional_context: Any | None = ...) -> None: ...
    @property
    def name(self): ...

class AccessDenied(UserError):
    __cause__: Any
    traceback: Any
    def __init__(self, message: str = ...) -> None: ...

class AccessError(UserError): ...

class CacheMiss(KeyError):
    def __init__(self, record, field) -> None: ...

class MissingError(UserError): ...
class ValidationError(UserError): ...

class except_orm(UserError):
    def __init__(self, name, value: Any | None = ...) -> None: ...

class Warning(UserError):
    def __init__(self, *args, **kwargs) -> None: ...

class QWebException(Exception):
    def __init__(self, *args, **kwargs) -> None: ...
