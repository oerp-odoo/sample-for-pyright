import csv
from typing import Any, NamedTuple

_logger: Any
WEB_TRANSLATION_COMMENT: str
SKIPPED_ELEMENTS: Any
_LOCALE2WIN32: Any
ENGLISH_SMALL_WORDS: Any

class UNIX_LINE_TERMINATOR(csv.excel):
    lineterminator: str

def encode(s): ...

TRANSLATED_ELEMENTS: Any
TRANSLATED_ATTRS: Any

def translate_attrib_value(node): ...

avoid_pattern: Any
node_pattern: Any

def translate_xml_node(node, callback, parse, serialize): ...
def parse_xml(text): ...
def serialize_xml(node): ...

_HTML_PARSER: Any

def parse_html(text): ...
def serialize_html(node): ...
def xml_translate(callback, value): ...
def html_translate(callback, value): ...
def translate(cr, name, source_type, lang, source: Any | None = ...): ...
def translate_sql_constraint(cr, key, lang): ...

class GettextAlias:
    def _get_db(self): ...
    def _get_cr(self, frame, allow_create: bool = ...): ...
    def _get_uid(self, frame): ...
    def _get_lang(self, frame): ...
    def __call__(self, source, *args, **kwargs): ...
    def _get_translation(self, source): ...

class _lt:
    __slots__: Any
    _source: Any
    _args: Any
    def __init__(self, source, *args, **kwargs) -> None: ...
    def __str__(self): ...
    def __eq__(self, other): ...
    def __lt__(self, other): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...

_: Any

def quote(s): ...

re_escaped_char: Any
re_escaped_replacements: Any

def _sub_replacement(match_obj): ...
def unquote(str): ...
def TranslationFileReader(source, fileformat: str = ...): ...

class CSVFileReader:
    source: Any
    prev_code_src: str
    def __init__(self, source) -> None: ...
    def __iter__(self): ...

class PoFileReader:
    pofile: Any
    def __init__(self, source): ...
    def __iter__(self): ...

def TranslationFileWriter(target, fileformat: str = ..., lang: Any | None = ...): ...

class CSVFileWriter:
    writer: Any
    def __init__(self, target) -> None: ...
    def write_rows(self, rows) -> None: ...

class PoFileWriter:
    buffer: Any
    lang: Any
    po: Any
    def __init__(self, target, lang) -> None: ...
    def write_rows(self, rows) -> None: ...
    def add_entry(self, modules, tnrs, source, trad, comments: Any | None = ...) -> None: ...

class TarFileWriter:
    tar: Any
    lang: Any
    def __init__(self, target, lang) -> None: ...
    def write_rows(self, rows) -> None: ...

def trans_export(lang, modules, buffer, format, cr) -> None: ...
def trans_parse_rml(de): ...
def _push(callback, term, source_line) -> None: ...
def in_modules(object_name, modules): ...
def _extract_translatable_qweb_terms(element, callback) -> None: ...
def babel_extract_qweb(fileobj, keywords, comment_tags, options): ...

class ImdInfo(NamedTuple):
    name: Any
    model: Any
    res_id: Any
    module: Any

class TranslationModuleReader:
    _cr: Any
    _modules: Any
    _lang: Any
    env: Any
    _to_translate: Any
    _path_list: Any
    _installed_modules: Any
    def __init__(self, cr, modules: Any | None = ..., lang: Any | None = ...) -> None: ...
    def __iter__(self): ...
    def _push_translation(self, module, ttype, name, res_id, source, comments: Any | None = ..., record_id: Any | None = ...) -> None: ...
    def _get_translatable_records(self, imd_records): ...
    def _export_translatable_records(self) -> None: ...
    def _get_module_from_path(self, path): ...
    def _verified_module_filepaths(self, fname, path, root): ...
    def _babel_extract_terms(self, fname, path, root, extract_method: str = ..., trans_type: str = ..., extra_comments: Any | None = ..., extract_keywords=...) -> None: ...
    def _export_translatable_resources(self) -> None: ...

def trans_load(cr, filename, lang, verbose: bool = ..., create_empty_translation: bool = ..., overwrite: bool = ...): ...
def trans_load_data(cr, fileobj, fileformat, lang, verbose: bool = ..., create_empty_translation: bool = ..., overwrite: bool = ...) -> None: ...
def get_locales(lang: Any | None = ...) -> None: ...
def resetlocale(): ...
def load_language(cr, lang) -> None: ...
