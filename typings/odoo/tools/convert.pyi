from .misc import ustr as ustr
from odoo import api as api
from typing import Any

__all__: Any
_logger: Any
safe_eval: Any

class ParseError(Exception): ...

class RecordDictWrapper(dict):
    record: Any
    def __init__(self, record) -> None: ...
    def __getitem__(self, key): ...

def _get_idref(self, env, model_str, idref): ...
def _fix_multiple_roots(node) -> None: ...
def _eval_xml(self, node, env): ...
def str2bool(value): ...
def nodeattr2bool(node, attr, default: bool = ...): ...

class xml_import:
    def get_env(self, node, eval_context: Any | None = ...): ...
    def make_xml_id(self, xml_id): ...
    def _test_xml_id(self, xml_id) -> None: ...
    def _tag_delete(self, rec) -> None: ...
    def _tag_report(self, rec): ...
    def _tag_function(self, rec) -> None: ...
    def _tag_act_window(self, rec) -> None: ...
    def _tag_menuitem(self, rec, parent: Any | None = ...) -> None: ...
    def _tag_record(self, rec): ...
    def _tag_template(self, el): ...
    def id_get(self, id_str, raise_if_not_found: bool = ...): ...
    def model_id_get(self, id_str, raise_if_not_found: bool = ...): ...
    def _tag_root(self, el) -> None: ...
    @property
    def env(self): ...
    @property
    def noupdate(self): ...
    mode: Any
    module: Any
    envs: Any
    idref: Any
    _noupdate: Any
    xml_filename: Any
    _tags: Any
    def __init__(self, cr, module, idref, mode, noupdate: bool = ..., xml_filename: Any | None = ...) -> None: ...
    def parse(self, de) -> None: ...
    DATA_ROOTS: Any

def convert_file(cr, module, filename, idref, mode: str = ..., noupdate: bool = ..., kind: Any | None = ..., pathname: Any | None = ...) -> None: ...
def convert_sql_import(cr, fp) -> None: ...
def convert_csv_import(cr, module, fname, csvcontent, idref: Any | None = ..., mode: str = ..., noupdate: bool = ...) -> None: ...
def convert_xml_import(cr, module, xmlfile, idref: Any | None = ..., mode: str = ..., noupdate: bool = ..., report: Any | None = ...) -> None: ...
