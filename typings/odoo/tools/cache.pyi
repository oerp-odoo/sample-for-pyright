from typing import Any

unsafe_eval = eval
_logger: Any

class ormcache_counter:
    __slots__: Any
    hit: int
    miss: int
    err: int
    def __init__(self) -> None: ...
    @property
    def ratio(self): ...

STAT: Any

class ormcache:
    args: Any
    skiparg: Any
    def __init__(self, *args, **kwargs) -> None: ...
    method: Any
    def __call__(self, method): ...
    key: Any
    def determine_key(self): ...
    def lru(self, model): ...
    def lookup(self, method, *args, **kwargs): ...
    def clear(self, model, *args) -> None: ...

class ormcache_context(ormcache):
    keys: Any
    def __init__(self, *args, **kwargs) -> None: ...
    key: Any
    def determine_key(self) -> None: ...

class ormcache_multi(ormcache):
    multi: Any
    def __init__(self, *args, **kwargs) -> None: ...
    key_multi: Any
    multi_pos: Any
    def determine_key(self) -> None: ...
    def lookup(self, method, *args, **kwargs): ...

class dummy_cache:
    def __init__(self, *l, **kw) -> None: ...
    def __call__(self, fn): ...
    def clear(self, *l, **kw) -> None: ...

def log_ormcache_stats(sig: Any | None = ..., frame: Any | None = ...): ...
def get_cache_key_counter(bound_method, *args, **kwargs): ...
cache = ormcache
