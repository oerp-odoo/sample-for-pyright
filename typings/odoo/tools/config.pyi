import optparse
from typing import Any

crypt_context: Any

class MyOption(optparse.Option):
    my_default: Any
    def __init__(self, *opts, **attrs) -> None: ...

DEFAULT_LOG_HANDLER: str

def _get_default_datadir(): ...
def _deduplicate_loggers(loggers): ...

class configmanager:
    options: Any
    blacklist_for_save: Any
    casts: Any
    misc: Any
    config_file: Any
    _LOGLEVELS: Any
    parser: Any
    def __init__(self, fname: Any | None = ...) -> None: ...
    def parse_config(self, args: Any | None = ...): ...
    rcfile: Any
    def _parse_config(self, args: Any | None = ...): ...
    def _warn_deprecated_options(self) -> None: ...
    def _is_addons_path(self, path): ...
    def _check_addons_path(self, option, opt, value, parser) -> None: ...
    def _check_upgrade_path(self, option, opt, value, parser) -> None: ...
    def _is_upgrades_path(self, res): ...
    def _test_enable_callback(self, option, opt, value, parser) -> None: ...
    def load(self) -> None: ...
    def save(self) -> None: ...
    def get(self, key, default: Any | None = ...): ...
    def pop(self, key, default: Any | None = ...): ...
    def get_misc(self, sect, key, default: Any | None = ...): ...
    def __setitem__(self, key, value) -> None: ...
    def __getitem__(self, key): ...
    @property
    def addons_data_dir(self): ...
    @property
    def session_dir(self): ...
    def filestore(self, dbname): ...
    def set_admin_password(self, new_password) -> None: ...
    def verify_admin_password(self, password): ...
    def _normalize(self, path): ...

config: Any
