from typing import Any

_logger: Any

def _format_frame(frame): ...
def _format_stack(stack): ...
def get_current_frame(thread: Any | None = ...): ...
def _get_stack_trace(frame, limit_frame: Any | None = ...): ...
def stack_size(): ...
def make_session(name: str = ...): ...
def force_hook() -> None: ...

class Collector:
    name: Any
    _registry: Any
    @classmethod
    def __init_subclass__(cls) -> None: ...
    @classmethod
    def make(cls, name, *args, **kwargs): ...
    _processed: bool
    _entries: Any
    profiler: Any
    def __init__(self) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add(self, entry: Any | None = ..., frame: Any | None = ...) -> None: ...
    def _get_stack_trace(self, frame: Any | None = ...): ...
    def post_process(self) -> None: ...
    @property
    def entries(self): ...

class SQLCollector(Collector):
    name: str
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def hook(self, cr, query, params, query_start, query_time) -> None: ...

class PeriodicCollector(Collector):
    name: str
    active: bool
    frame_interval: Any
    thread: Any
    last_frame: Any
    def __init__(self, interval: float = ...) -> None: ...
    def run(self) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add(self, entry: Any | None = ..., frame: Any | None = ...) -> None: ...

class SyncCollector(Collector):
    name: str
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def hook(self, _frame, event, _arg: Any | None = ...): ...
    def _get_stack_trace(self, frame: Any | None = ...) -> None: ...
    def post_process(self) -> None: ...

class QwebTracker:
    @classmethod
    def wrap_render(cls, method_render): ...
    @classmethod
    def wrap_compile(cls, method_compile): ...
    @classmethod
    def wrap_compile_directive(cls, method_compile_directive): ...
    execution_context_enabled: Any
    qweb_hooks: Any
    context_stack: Any
    cr: Any
    view_id: Any
    def __init__(self, view_id, arch, cr) -> None: ...
    def enter_directive(self, directive, attrib, xpath) -> None: ...
    def leave_directive(self) -> None: ...

class QwebCollector(Collector):
    name: str
    events: Any
    hook: Any
    def __init__(self) -> None: ...
    def _get_directive_profiling_name(self, directive, attrib): ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def post_process(self) -> None: ...

class ExecutionContext:
    context: Any
    previous_context: Any
    def __init__(self, **context) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, *_args) -> None: ...

class Profiler:
    start_time: int
    duration: int
    profile_session: Any
    description: Any
    init_frame: Any
    init_stack_trace: Any
    init_thread: Any
    disable_gc: Any
    filecache: Any
    params: Any
    db: Any
    collectors: Any
    def __init__(self, collectors: Any | None = ..., db=..., profile_session: Any | None = ..., description: Any | None = ..., disable_gc: bool = ..., params: Any | None = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args) -> None: ...
    def _add_file_lines(self, stack) -> None: ...
    def entry_count(self): ...
    def format_path(self, path): ...
    def json(self): ...

class Nested:
    profiler: Any
    context_manager: Any
    def __init__(self, profiler, context_manager) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback): ...
