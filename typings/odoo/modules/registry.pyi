from collections.abc import Mapping
from typing import Any

from odoo.sql_db import Cursor

_logger: Any
_schema: Any

class Registry(Mapping):
    _lock: Any
    _saved_lock: Any
    def registries(cls): ...
    def __new__(cls, db_name): ...
    @classmethod
    def new(cls, db_name, force_demo: bool = ..., status: Any | None = ..., update_module: bool = ...): ...
    models: Any
    _sql_constraints: Any
    _init: bool
    _assertion_report: Any
    _fields_by_model: Any
    _ordinary_tables: Any
    _constraint_queue: Any
    __cache: Any
    _init_modules: Any
    updated_modules: Any
    loaded_xmlids: Any
    db_name: Any
    _db: Any
    test_cr: Any
    test_lock: Any
    loaded: bool
    ready: bool
    field_depends: Any
    field_depends_context: Any
    field_inverses: Any
    registry_sequence: Any
    cache_sequence: Any
    _invalidation_flags: Any
    has_unaccent: Any
    has_trigram: Any
    def init(self, db_name) -> None: ...
    @classmethod
    def delete(cls, db_name) -> None: ...
    @classmethod
    def delete_all(cls) -> None: ...
    def __len__(self): ...
    def __iter__(self): ...
    def __getitem__(self, model_name): ...
    def __call__(self, model_name): ...
    def __setitem__(self, model_name, model) -> None: ...
    def __delitem__(self, model_name) -> None: ...
    def descendants(self, model_names, *kinds): ...
    def load(self, cr, module): ...
    _m2m: Any
    def setup_models(self, cr) -> None: ...
    def field_computed(self): ...
    def field_triggers(self): ...
    def post_init(self, func, *args, **kwargs) -> None: ...
    def post_constraint(self, func, *args, **kwargs) -> None: ...
    def finalize_constraints(self) -> None: ...
    _post_init_queue: Any
    _foreign_keys: Any
    _is_install: Any
    def init_models(self, cr, model_names, context, install: bool = ...) -> None: ...
    def check_indexes(self, cr, model_names) -> None: ...
    def add_foreign_key(self, table1, column1, table2, column2, ondelete, model, module, force: bool = ...) -> None: ...
    def check_foreign_keys(self, cr) -> None: ...
    def check_tables_exist(self, cr) -> None: ...
    def _clear_cache(self) -> None: ...
    def clear_caches(self) -> None: ...
    def is_an_ordinary_table(self, model): ...
    @property
    def registry_invalidated(self): ...
    @registry_invalidated.setter
    def registry_invalidated(self, value) -> None: ...
    @property
    def cache_invalidated(self): ...
    @cache_invalidated.setter
    def cache_invalidated(self, value) -> None: ...
    def setup_signaling(self) -> None: ...
    def check_signaling(self): ...
    def signal_changes(self) -> None: ...
    def reset_changes(self) -> None: ...
    def manage_changes(self) -> None: ...
    def in_test_mode(self): ...
    def enter_test_mode(self, cr) -> None: ...
    def leave_test_mode(self) -> None: ...
    def cursor(self) -> Cursor: ...

class DummyRLock:
    def acquire(self) -> None: ...
    def release(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type, value, traceback) -> None: ...
