import datetime
import enum
from typing import Any

from .tools import date_utils

DATE_LENGTH: Any
DATETIME_LENGTH: Any
NO_ACCESS: str
IR_MODELS: Any
_logger: Any
_schema: Any
Default: Any

def first(records): ...
def resolve_mro(model, name, predicate): ...

class MetaField(type):
    by_type: Any
    def __init__(cls, name, bases, attrs) -> None: ...

_global_seq: Any

class Field:
    type: Any
    relational: bool
    translate: bool
    column_type: Any
    column_format: str
    column_cast_from: Any
    write_sequence: int
    args: Any
    _module: Any
    _modules: Any
    _setup_done: bool
    _sequence: Any
    _base_fields: Any
    _extra_keys: Any
    _direct: bool
    _toplevel: bool
    automatic: bool
    inherited: bool
    inherited_field: Any
    name: Any
    model_name: Any
    comodel_name: Any
    store: bool
    index: bool
    manual: bool
    copy: bool
    _depends: Any
    _depends_context: Any
    recursive: bool
    compute: Any
    compute_sudo: bool
    inverse: Any
    search: Any
    related: Any
    company_dependent: bool
    default: Any
    string: Any
    help: Any
    invisible: bool
    readonly: bool
    required: bool
    states: Any
    groups: Any
    change_default: bool
    deprecated: Any
    related_field: Any
    group_operator: Any
    group_expand: Any
    prefetch: bool
    def __init__(self, string=..., **kwargs) -> None: ...
    def new(self, **kwargs): ...
    def __str__(self): ...
    def __repr__(self): ...
    def __set_name__(self, owner, name) -> None: ...
    def _get_attrs(self, model_class, name): ...
    def _setup_attrs(self, model_class, name): ...
    def prepare_setup(self) -> None: ...
    def setup(self, model) -> None: ...
    def setup_nonrelated(self, model) -> None: ...
    def get_depends(self, model): ...
    def setup_related(self, model) -> None: ...
    def traverse_related(self, record): ...
    def _compute_related(self, records) -> None: ...
    def _process_related(self, value): ...
    def _inverse_related(self, records) -> None: ...
    def _search_related(self, records, operator, value): ...
    _related_comodel_name: Any
    _related_string: Any
    _related_help: Any
    _related_groups: Any
    _related_group_operator: Any
    @property
    def base_field(self): ...
    @property
    def groupable(self): ...
    def _default_company_dependent(self, model): ...
    def _compute_company_dependent(self, records) -> None: ...
    def _inverse_company_dependent(self, records) -> None: ...
    def _search_company_dependent(self, records, operator, value): ...
    def resolve_depends(self, registry) -> None: ...
    def get_description(self, env): ...
    _description_store: Any
    _description_manual: Any
    _description_related: Any
    _description_company_dependent: Any
    _description_readonly: Any
    _description_required: Any
    _description_states: Any
    _description_groups: Any
    _description_change_default: Any
    _description_deprecated: Any
    _description_group_operator: Any
    def _description_depends(self, env): ...
    @property
    def _description_searchable(self): ...
    @property
    def _description_sortable(self): ...
    def _description_string(self, env): ...
    def _description_help(self, env): ...
    def is_editable(self): ...
    def null(self, record): ...
    def convert_to_column(self, value, record, values: Any | None = ..., validate: bool = ...): ...
    def convert_to_cache(self, value, record, validate: bool = ...): ...
    def convert_to_record(self, value, record): ...
    def convert_to_record_multi(self, values, records): ...
    def convert_to_read(self, value, record, use_name_get: bool = ...): ...
    def convert_to_write(self, value, record): ...
    def convert_to_onchange(self, value, record, names): ...
    def convert_to_export(self, value, record): ...
    def convert_to_display_name(self, value, record): ...
    def update_db(self, model, columns): ...
    def update_db_column(self, model, column) -> None: ...
    def update_db_notnull(self, model, column) -> None: ...
    def update_db_related(self, model) -> None: ...
    def read(self, records) -> None: ...
    def create(self, record_values) -> None: ...
    def write(self, records, value): ...
    # def __get__(self, record, owner): ...
    def mapped(self, records): ...
    def __set__(self, records, value): ...
    def recompute(self, records) -> None: ...
    def compute_value(self, records) -> None: ...
    def determine_inverse(self, records) -> None: ...
    def determine_domain(self, records, operator, value): ...

class Boolean(Field):
    type: str
    column_type: Any
    def convert_to_column(self, value, record, values: Any | None = ..., validate: bool = ...): ...
    def convert_to_cache(self, value, record, validate: bool = ...): ...
    def convert_to_export(self, value, record): ...

class Integer(Field):
    type: str
    column_type: Any
    group_operator: str
    def convert_to_column(self, value, record, values: Any | None = ..., validate: bool = ...): ...
    def convert_to_cache(self, value, record, validate: bool = ...): ...
    def convert_to_record(self, value, record): ...
    def convert_to_read(self, value, record, use_name_get: bool = ...): ...
    def _update(self, records, value) -> None: ...
    def convert_to_export(self, value, record): ...

class Float(Field):
    type: str
    column_cast_from: Any
    _digits: Any
    group_operator: str
    def __init__(self, string=..., digits=..., **kwargs) -> None: ...
    @property
    def column_type(self): ...
    def get_digits(self, env): ...
    _related__digits: Any
    def _description_digits(self, env): ...
    def convert_to_column(self, value, record, values: Any | None = ..., validate: bool = ...): ...
    def convert_to_cache(self, value, record, validate: bool = ...): ...
    def convert_to_record(self, value, record): ...
    def convert_to_export(self, value, record): ...
    round: Any
    is_zero: Any
    compare: Any

class Monetary(Field):
    type: str
    write_sequence: int
    column_type: Any
    column_cast_from: Any
    currency_field: Any
    group_operator: str
    def __init__(self, string=..., currency_field=..., **kwargs) -> None: ...
    def _description_currency_field(self, env): ...
    def get_currency_field(self, model): ...
    def setup_nonrelated(self, model) -> None: ...
    def setup_related(self, model) -> None: ...
    def convert_to_column(self, value, record, values: Any | None = ..., validate: bool = ...): ...
    def convert_to_cache(self, value, record, validate: bool = ...): ...
    def convert_to_record(self, value, record): ...
    def convert_to_read(self, value, record, use_name_get: bool = ...): ...
    def convert_to_write(self, value, record): ...

class _String(Field):
    translate: bool
    prefetch: Any
    def __init__(self, string=..., **kwargs) -> None: ...
    def _setup_attrs(self, model_class, name) -> None: ...
    _related_translate: Any
    def _description_translate(self, env): ...
    def get_trans_terms(self, value): ...
    def get_trans_func(self, records): ...
    def write(self, records, value): ...

class Char(_String):
    type: str
    column_cast_from: Any
    size: Any
    trim: bool
    def _setup_attrs(self, model_class, name) -> None: ...
    @property
    def column_type(self): ...
    def update_db_column(self, model, column) -> None: ...
    _related_size: Any
    _related_trim: Any
    _description_size: Any
    _description_trim: Any
    def convert_to_column(self, value, record, values: Any | None = ..., validate: bool = ...): ...
    def convert_to_cache(self, value, record, validate: bool = ...): ...

class Text(_String):
    type: str
    column_type: Any
    column_cast_from: Any
    def convert_to_cache(self, value, record, validate: bool = ...): ...

class Html(_String):
    type: str
    column_type: Any
    column_cast_from: Any
    sanitize: bool
    sanitize_tags: bool
    sanitize_attributes: bool
    sanitize_style: bool
    sanitize_form: bool
    strip_style: bool
    strip_classes: bool
    def _get_attrs(self, model_class, name): ...
    _related_sanitize: Any
    _related_sanitize_tags: Any
    _related_sanitize_attributes: Any
    _related_sanitize_style: Any
    _related_strip_style: Any
    _related_strip_classes: Any
    _description_sanitize: Any
    _description_sanitize_tags: Any
    _description_sanitize_attributes: Any
    _description_sanitize_style: Any
    _description_strip_style: Any
    _description_strip_classes: Any
    def convert_to_column(self, value, record, values: Any | None = ..., validate: bool = ...): ...
    def convert_to_cache(self, value, record, validate: bool = ...): ...
    def convert_to_record(self, value, record): ...
    def convert_to_read(self, value, record, use_name_get: bool = ...): ...
    def get_trans_terms(self, value): ...

class Date(Field):
    type: str
    column_type: Any
    column_cast_from: Any
    start_of = date_utils.start_of
    end_of = date_utils.end_of
    add = date_utils.add
    subtract = date_utils.subtract
    @staticmethod
    def today(*args) -> datetime.date: ...
    @staticmethod
    def context_today(record, timestamp: Any | None = ...) -> datetime.date: ...
    @staticmethod
    def to_date(value) -> datetime.date: ...
    from_string = to_date
    @staticmethod
    def to_string(value): ...
    def convert_to_cache(self, value, record, validate: bool = ...): ...
    def convert_to_export(self, value, record): ...

class Datetime(Field):
    type: str
    column_type: Any
    column_cast_from: Any
    start_of = date_utils.start_of
    end_of = date_utils.end_of
    add = date_utils.add
    subtract = date_utils.subtract
    @staticmethod
    def now(*args) -> datetime.datetime: ...
    @staticmethod
    def today(*args) -> datetime.datetime: ...
    @staticmethod
    def context_timestamp(record, timestamp) -> datetime.datetime: ...
    @staticmethod
    def to_datetime(value) -> datetime.datetime: ...
    from_string = to_datetime
    @staticmethod
    def to_string(value): ...
    def convert_to_cache(self, value, record, validate: bool = ...): ...
    def convert_to_export(self, value, record): ...
    def convert_to_display_name(self, value, record): ...
_BINARY = memoryview

class Binary(Field):
    type: str
    prefetch: bool
    _depends_context: Any
    attachment: bool
    @property
    def column_type(self): ...
    def _get_attrs(self, model_class, name): ...
    _description_attachment: Any
    def convert_to_column(self, value, record, values: Any | None = ..., validate: bool = ...): ...
    def convert_to_cache(self, value, record, validate: bool = ...): ...
    def convert_to_record(self, value, record): ...
    def compute_value(self, records) -> None: ...
    def read(self, records) -> None: ...
    def create(self, record_values) -> None: ...
    def write(self, records, value): ...

class Image(Binary):
    max_width: int
    max_height: int
    verify_resolution: bool
    def create(self, record_values) -> None: ...
    def write(self, records, value) -> None: ...
    def _image_process(self, value): ...
    def _process_related(self, value): ...

class Selection(Field):
    type: str
    column_type: Any
    selection: Any
    validate: bool
    ondelete: Any
    def __init__(self, selection=..., string=..., **kwargs) -> None: ...
    def setup_nonrelated(self, model) -> None: ...
    def setup_related(self, model): ...
    def _get_attrs(self, model_class, name): ...
    def _setup_attrs(self, model_class, name) -> None: ...
    def _selection_modules(self, model): ...
    def _description_selection(self, env): ...
    def _default_group_expand(self, records, groups, domain, order): ...
    def get_values(self, env): ...
    def convert_to_column(self, value, record, values: Any | None = ..., validate: bool = ...): ...
    def convert_to_cache(self, value, record, validate: bool = ...): ...
    def convert_to_export(self, value, record): ...

class Reference(Selection):
    type: str
    @property
    def column_type(self): ...
    def convert_to_column(self, value, record, values: Any | None = ..., validate: bool = ...): ...
    def convert_to_cache(self, value, record, validate: bool = ...): ...
    def convert_to_record(self, value, record): ...
    def convert_to_read(self, value, record, use_name_get: bool = ...): ...
    def convert_to_export(self, value, record): ...
    def convert_to_display_name(self, value, record): ...

class _Relational(Field):
    relational: bool
    domain: Any
    context: Any
    check_company: bool
    # def __get__(self, records, owner): ...
    comodel_name: str
    def setup_nonrelated(self, model) -> None: ...
    def get_domain_list(self, model): ...
    @property
    def _related_domain(self): ...
    _related_context: Any
    _description_relation: Any
    _description_context: Any
    def _description_domain(self, env): ...
    def null(self, record): ...

class Many2one(_Relational):
    type: str
    column_type: Any
    ondelete: Any
    auto_join: bool
    delegate: bool
    def __init__(self, comodel_name=..., string=..., **kwargs) -> None: ...
    def _setup_attrs(self, model_class, name) -> None: ...
    def setup_nonrelated(self, model) -> None: ...
    def update_db(self, model, columns): ...
    def update_db_column(self, model, column) -> None: ...
    def update_db_foreign_key(self, model, column) -> None: ...
    def _update(self, records, value) -> None: ...
    def convert_to_column(self, value, record, values: Any | None = ..., validate: bool = ...): ...
    def convert_to_cache(self, value, record, validate: bool = ...): ...
    def convert_to_record(self, value, record): ...
    def convert_to_record_multi(self, values, records): ...
    def convert_to_read(self, value, record, use_name_get: bool = ...): ...
    def convert_to_write(self, value, record): ...
    def convert_to_export(self, value, record): ...
    def convert_to_display_name(self, value, record): ...
    def convert_to_onchange(self, value, record, names): ...
    def write(self, records, value): ...
    def _remove_inverses(self, records, value): ...
    def _update_inverses(self, records, value) -> None: ...

class Many2oneReference(Integer):
    type: str
    model_field: Any
    _related_model_field: Any
    def convert_to_cache(self, value, record, validate: bool = ...): ...
    def _remove_inverses(self, records, value) -> None: ...
    def _update_inverses(self, records, value) -> None: ...
    def _record_ids_per_res_model(self, records): ...

class Command(enum.IntEnum):
    CREATE: int
    UPDATE: int
    DELETE: int
    UNLINK: int
    LINK: int
    CLEAR: int
    SET: int
    @classmethod
    def create(cls, values: dict): ...
    @classmethod
    def update(cls, id: int, values: dict): ...
    @classmethod
    def delete(cls, id: int): ...
    @classmethod
    def unlink(cls, id: int): ...
    @classmethod
    def link(cls, id: int): ...
    @classmethod
    def clear(cls): ...
    @classmethod
    def set(cls, ids: list): ...

class _RelationalMulti(_Relational):
    write_sequence: int
    def _update(self, records, value): ...
    def convert_to_cache(self, value, record, validate: bool = ...): ...
    def convert_to_record(self, value, record): ...
    def convert_to_record_multi(self, values, records): ...
    def convert_to_read(self, value, record, use_name_get: bool = ...): ...
    def convert_to_write(self, value, record): ...
    def convert_to_export(self, value, record): ...
    def convert_to_display_name(self, value, record) -> None: ...
    def get_depends(self, model): ...
    def create(self, record_values) -> None: ...
    def write(self, records, value): ...
    def write_batch(self, records_commands_list, create: bool = ...): ...

class One2many(_RelationalMulti):
    type: str
    inverse_name: Any
    auto_join: bool
    limit: Any
    copy: bool
    def __init__(self, comodel_name=..., inverse_name=..., string=..., **kwargs) -> None: ...
    def setup_nonrelated(self, model) -> None: ...
    _description_relation_field: Any
    def update_db(self, model, columns) -> None: ...
    def get_domain_list(self, records): ...
    # def __get__(self, records, owner): ...
    def read(self, records): ...
    def write_real(self, records_commands_list, create: bool = ...): ...
    def write_new(self, records_commands_list): ...

class Many2many(_RelationalMulti):
    type: str
    _explicit: bool
    relation: Any
    column1: Any
    column2: Any
    auto_join: bool
    limit: Any
    ondelete: Any
    def __init__(self, comodel_name=..., relation=..., column1=..., column2=..., string=..., **kwargs) -> None: ...
    def setup_nonrelated(self, model) -> None: ...
    def update_db(self, model, columns) -> None: ...
    def update_db_foreign_keys(self, model) -> None: ...
    @property
    def groupable(self): ...
    def read(self, records) -> None: ...
    def write_real(self, records_commands_list, create: bool = ...): ...
    def write_new(self, records_commands_list): ...

class Id(Field):
    type: str
    column_type: Any
    string: str
    store: bool
    readonly: bool
    prefetch: bool
    def update_db(self, model, columns) -> None: ...
    def __get__(self, record, owner): ...
    def __set__(self, record, value) -> None: ...

def prefetch_many2one_ids(record, field): ...
def prefetch_x2many_ids(record, field): ...
def apply_required(model, field_name) -> None: ...
